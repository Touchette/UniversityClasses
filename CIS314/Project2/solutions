===========================
       Problem 2-4
===========================
---------------------------
Two's Complement to Decimal
---------------------------

a. 0x000000FF
// convert to binary:
   00000000 00000000 00000000 11111111
// note that the number is positive due to starting with a 0.
// because it's positive, convert to decimal directly. because hex
// is a base-16 system, we multiply the decimal value of the hex at
// any given position "n" by 16^n, where n starts at 0 from the right:
   (15 * 16^1) + (15 * 16^0)
   0x000000FF = 255
// the original hex value was positive, so work is done.
   Result : 255


b. 0xFFFFFCE6
// convert to binary:
   11111111 11111111 11111100 11100110
// note that the number is negative due to starting with a 1.
// because it's negative, we need to switch it to positive by
// inverting the bits and adding one:
   ~0xFFFFFCE6 =
   00000000 00000000 00000011 00011001 = 0x00000319
   0x00000319 + 1 =
   00000000 00000000 00000011 00011010 = 0x0000031A
// convert the magnitude of this number to decimal:
   (3 * 16^2) + (1 * 16^1) + (10 * 16^0)
   0x0000031A = 794
// the original hex value was negative, so add a negative sign:
   Result : -794



c. 0xFFFFFFFF
// convert to binary:
   11111111 11111111 11111111 11111111
// note that the number is negative due to starting with a 1.
// because it's negative, we need to switch it to positive by
// inverting the bits and adding one:
   ~0xFFFFFFFF =
   00000000 00000000 00000000 00000000 = 0x00000000
   0x00000000 + 1 =
   00000000 00000000 00000000 00000001 = 0x00000001
// convert the magnitude of this number to decimal:
   (1 * 16^0) = 1
// the original hex value was negative, so add a negative sign:
   Result : -1


===========================
       Problem 2-5
===========================
---------------------------
Hex IEEE754Float to Decimal
---------------------------

a. 0x80000000
// convert to binary in 3 individual groups:
   1   0000 0000   0000 0000 0000 0000 0000 000
// bit 31 is the signbit, bits 23-30 are the exponent,
// bits 0-22 are the fraction.
// look at sign bit, if it is one, it is a negative number. 
// get the exponent and correct bias. the exponent is 
// a positive binary number minus the bias:
   0000 0000 = 0
// subtract 127 (bias for a single-precision number) from 
// the result to find the exponent:
   0 - 127 = -127
// get the fraction into base ten:
   0000 0000 0000 0000 0000 000 = (0 * 2^-1) + (0 * 2^-2) ... = 0 
// put all numbers into an expression of the form
// (-1)^(signbit) * (2)^(exponent - bias) * (1 + fraction)
// NOTE: because IEEE754 decimal floating point encoding
// encodes negative zero as an exponent in any valid range, 
// significand (fraction) being 0, and signbit 1, our result is
// negative zero. this is due to underflow multiplication.
   (-1)^1 * 2^(-127) + (1 + 0) = -1 * 0.0 * 1
   Result : -0
	

b. 0x41220000
// convert to binary in 3 groups:
   0   1000 0100   1000 1000 0000 0000 0000 000
// signbit is 0, number is positive. exponent is
// 1000 0100, converted to decimal is 132. We thus get
// 2^5 for the exponent after removing the bias. Fraction:
   (1 * 2^-1) + ... + (1 * 2^-5) = 0.53125
// put all numbers into the expression again:
   (-1)^0 * 2^(132 - 127) * (1 + 0.53125) = 1 * 2^5 * 1.53125
   Result : 49.0


c. 0xC39D0000
// convert to binary in 3 groups:
   1   1000 0111   0011 1010 0000 0000 0000 000
// signbit is 1, number is negative. exponent is
// 1000 0100, converted to decimal is 135. Thus we get
// 2^8 for the exponent after removing the bias. Fraction:
   (1 * 2^-3) + ... + (1 * 2^-4) + ... + (1 * 2^-5) + ... + (1 * 2^-7)
   = 0.2265625
// put all numbers into the expression again:
   (-1)^1 * 2^(135 - 127) * (1 + 0.2265625) = -1 * 2^8 * 1.2265625
   Result : -314.0



===========================
       Problem 2-5
===========================
---------------------------
Decimal to Hex IEEE754Float
---------------------------

a. 1.0
// first we convert 1 to binary:
   1 = 1
// now we convert what comes after the decimal place (0) to binary
   0 = 0
// we now have the binary representation that looks like : 1.0
// move the decimal place up to the first position in our binary ...
// which is already done for this case. because we moved our decimal
// 0 places, our exponent for 2 is 0. our mantissa is also 0 because
// we didn't actually do anything to convert 0 into a binary string for
// the part after the decimal place. because our exponent is 0, we want
// to ADD 127 to it, the opposite of what we did when converting from IEEE754
// to decimal. this is due to the fact that it's integer division half of 255,
// which is 1111 1111 in binary. doing that we get our exponent for the binary
// string we will get. 0 + 127 = 127, which in binary is:
   127 = 128 - 1 = 0111 1111
// our number is positive, so our signbit is thus 0. our mantissa is also purely
// 0, so that's just 23 bits of 0. 
// Signbit = 0, Exponent = 0, Mantissa = 0000 ...
// thus all we need to do is fill in our 3 groups of binary, same as we did 
// when converting from hex to binary in 2-4:
   Result : 0   0111 1111   0000 0000 0000 0000 0000 000 = 1.0

b. 8.25
// first we convert 8 to binary:
   8 = 4 * 2 + 0
   4 = 2 * 2 + 0
   2 = 1 * 2 + 0
   1 = 0 * 2 + 1
   8 = 1000
// now we convert what comes after the decimal place (0.25) to binary:
   0.25 * 2 = 0.50
   0.50 * 2 = 1.00
   0.00 * 2 = 0.00
   0.00 * 2 = 0.00
         ...
// thus after our conversion we are left with 1000.010000 ...
// we move the decimal place to the front, which is 3 spaces, so our
// exponent is thus 3. (1.000010000 ...)
// Signbit = 0, Exponent = 3, Mantissa = 000010000 ...
// Exponent + 127 = 130, that's just 128 + 2, so exponent in binary is:
   127 + 3 = 130 = 128 + 2 = (1000 0010)
// now we simply put them into their spots in the 3 groups of binary:
   Result : 0   1000 0010   0000 0000 0000 0000 0000 000 = 8.25

c. -25.125
// first we convert 25 to binary:
   25 = 12 * 2 + 1
   12 = 6 * 2 + 0
   6 = 3 * 2 + 0
   3 = 1 * 2 + 1
   1 = 0 * 2 + 1
   25 = 11001
// now we convert what comes after the decimal place (0.125) to binary:
   0.125 * 2 = 0.25
   0.25 * 2 = 0.50
   0.50 * 2 = 1.00
   0.00 * 2 = 0.00
        ...
// thus after our conversion we are left with 11001.0010000 ...
// we move the decimal place to the front, which is 4 spaces, so our
// exponent is thus 4. (1.10010010000 ...)
// Signbit = 1, Exponent = 4, Mantissa = 10010010000 ...
// Exponent = 127 + 4 = 131, that's just 128 + 3, so exponent in binary is:
   127 + 4 = 131 = 128 + 3 = (1000 0011)
// now we simply put them into their spots in the 3 groups of binary:
   Result = 1   1000 0011   1001 0010 0000 0000 0000 000 = -25.125

